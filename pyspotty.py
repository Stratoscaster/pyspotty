from api.auth import RequestUserAuth
from time import sleep
from os import path
class Pyspotty:
    __AUTH_FILE_NAME = 'auth.txt'
    def __init__(self):
        print('Welcome to pyspotty!')
        credentials = self.get_credentials()
        self.client_id = credentials['id']
        if self.client_id is None:
            print('Credentials.txt file must have one line with the mapping:\nid:<your client_id here>')
            quit()

        # Check for an existing auth token

        token_request = RequestUserAuth(self.client_id, self.client_secret)
        token_request.call()
        while token_request.auth_token is None:
            sleep(0.5)  # Wait until the auth_token is populated
        self.auth_token = token_request.auth_token
        print('Auth token received. Saving token to "/auth.txt". Do NOT edit this file in any way.')

    @staticmethod
    def save_new_auth_token(auth_token: str):
        with open(Pyspotty.__AUTH_FILE_NAME)

    def get_existing_auth_token(self):
        if path.exists(Pyspotty.__AUTH_FILE_NAME) and path.isfile(Pyspotty.__AUTH_FILE_NAME):
            with open(Pyspotty.__AUTH_FILE_NAME, 'r') as auth_file:
                self.auth_token = auth_file.readline().replace('\n', '').replace(' ', '').replace('\t', '')
                print('Auth token found.')
        else:
            print('No auth token found. Sending auth request...')
            return None

    def get_credentials(self):
        mappings = {}
        with open('credentials.txt','r') as f:
            content = f.readlines()

            for line in content:
                key, value = line.split(':')
                mappings[key] = value
        return mappings

